# -*- coding: utf-8 -*-
"""letterboxd_sentiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m9DO-j54raiDvgYR_PpWjqzgWEWFdOBy
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import seaborn as sns
from matplotlib import pyplot
import matplotlib.pyplot as plt
import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')
nltk.download('vader_lexicon')

df = pd.read_csv("/content/drive/MyDrive/burning_reviews.csv")
df

#drop rows
df.isnull().sum() #list all the rows that have null values
df.dropna(inplace=True) #dropping all the rows w missing values

ax = df['Rating'].value_counts().sort_index().plot(kind='bar',
                                                   title='count of reviews by stars',
                                                   figsize=(10,5))
plt.show()

"""## nltk"""

example = df['Review'][80]
example

tokens = nltk.word_tokenize(example)
tokens[:10]

tagged = nltk.pos_tag(tokens)
tagged[:10]

entities = nltk.chunk.ne_chunk(tagged)
entities.pprint()

"""## VADER sentiment scoring"""

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm

sia = SentimentIntensityAnalyzer()

sia.polarity_scores("I am so happy!")

sia.polarity_scores("This is the worst thing ever!")

sia.polarity_scores(example)

#run polarity score on entire dataset
results = {}
for idx, row in df.iterrows():
    txt = row['Review']
    results[idx] = sia.polarity_scores(txt)

vaders = pd.DataFrame(results).T
# vaders = vaders.merge(df, how='left_on')
vaders = pd.concat([vaders, df], axis = 1)
vaders

plot = sns.barplot(data=vaders, x='Rating', y='compound')
plot.set_title('compound score by Letterboxd reviews')
plt.show()

fig, axs = plt.subplots(1, 3, figsize = (12,3))
rating_sorted = df['Rating'].sort_index()
sns.barplot(data=vaders, x='Rating', y='pos', ax=axs[0])
sns.barplot(data=vaders, x='Rating', y='neu', ax=axs[1])
sns.barplot(data=vaders, x='Rating', y='neg', ax=axs[2])
axs[0].set_title('positive')
axs[1].set_title('neutral')
axs[2].set_title('negative')
plt.show()

"""## roberta pretrained model"""

!pip install transformers

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

encoded_text = tokenizer(example, return_tensors='pt')
output = model(**encoded_text) #iterate through list of encoded text
scores = output[0][0].detach().numpy()
scores = softmax(scores)
scores_dict = {
    'roberta_neg': scores[0],
    'roberta_neu': scores[1],
    'roberta_pos': scores[2]
}
print(scores_dict)

def polarity_scores_roberta(example):
  encoded_text = tokenizer(example, return_tensors='pt')
  output = model(**encoded_text) #iterate through list of encoded text
  scores = output[0][0].detach().numpy()
  scores = softmax(scores)
  scores_dict = {
      'roberta_neg': scores[0],
      'roberta_neu': scores[1],
      'roberta_pos': scores[2],
  }
  return scores_dict

results = {}
for idx, row in df.iterrows():
  try:
    txt = row['Review']
    vader_result = sia.polarity_scores(txt)
    roberta_result = polarity_scores_roberta(txt)
    both = {**vader_result, **roberta_result}
    results[idx] = both
  except RuntimeError:
    print(f'broke for index {idx}')

results

results_df = pd.DataFrame(results).T
# vaders = vaders.merge(df, how='left_on')
results_df = pd.concat([results_df, df], axis = 1)
results_df

"""# compare scores between models

"""

results_df.columns

sns.pairplot(data=results_df,
             vars=['neg', 'neu', 'pos',
                  'roberta_neg', 'roberta_neu','roberta_pos'],
             hue="Rating",
             palette='tab10')

"""# transformers pipeline"""

from transformers import pipeline

sentiment_pipeline = pipeline("sentiment-analysis")

example

sentiment_pipeline(example)